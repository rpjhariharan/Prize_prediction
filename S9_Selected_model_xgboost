import pandas as pd
import numpy as np
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.model_selection import train_test_split, cross_val_score


# Load Dataset
file_path = r'D:\OneDrive\Desktop\Car\Cleaned\Feature_Engineered_Car_Dataset.csv'
car_data = pd.read_csv(file_path)

# Define Features and Target
X = car_data.drop(columns=['Price'])
y = car_data['Price']

# Split Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Model
xgb_model = XGBRegressor(random_state=42)
xgb_model.fit(X_train, y_train)

# Predict
y_train_pred = xgb_model.predict(X_train)
y_test_pred = xgb_model.predict(X_test)

# Metrics
train_mae = mean_absolute_error(y_train, y_train_pred)
test_mae = mean_absolute_error(y_test, y_test_pred)
train_r2 = r2_score(y_train, y_train_pred)
test_r2 = r2_score(y_test, y_test_pred)
train_rmse = np.sqrt(mean_squared_error(y_train, y_train_pred))
test_rmse = np.sqrt(mean_squared_error(y_test, y_test_pred))

# Cross-Validation
cv_scores = cross_val_score(xgb_model, X, y, cv=5, scoring='r2')

# Results
print("XGBoost Regressor Results:")
print("Train MAE:", train_mae, "Test MAE:", test_mae)
print("Train R²:", train_r2, "Test R²:", test_r2)
print("Train RMSE:", train_rmse, "Test RMSE:", test_rmse)
print("CV Mean R²:", cv_scores.mean(), "CV Std R²:", cv_scores.std())

xgb_model.save_model(r"D:\OneDrive\Desktop\AIasServ\python\pythonProject\xgboost_model.json")
