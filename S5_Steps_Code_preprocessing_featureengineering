Steps Carried Out on the Dataset
Age Calculation:

Calculated the car's age by subtracting the "Year of Manufacture" from the reference year (2024) to obtain an "Age" feature.
Dropped the original "Year of Manufacture" column as it’s now represented by "Age."
Encoding Categorical Features:

Applied one-hot encoding for categorical columns like "Fuel Type," "Transmission Type," "Body Type," "OEM," and "City," which helps capture category-specific information.
Insurance Validity Conversion:

Converted "Insurance Validity" into a binary indicator, with 1 for "Comprehensive" insurance and 0 for other types.
Extracting Top Features:

Extracted commonly observed features in the "Top Features" column (e.g., "Power Steering," "Power Windows," "Air Conditioning") and represented each as a binary column indicating presence or absence.
Creating an Interaction Feature:

Created an interaction term "Age × Kilometers Driven" to capture the combined depreciation effects of age and mileage, enhancing model performance.

Missing Values:

Numerical columns were filled with the median value.
Categorical columns were filled with the mode (most frequent value).
Outlier Handling:

Outliers in numerical columns were capped using the IQR method, limiting values to the lower and upper bounds (whiskers).



import pandas as pd
import ast

# Load the dataset
file_path = '/mnt/data/Merged_Cars_Dataset_with_City_Column.csv'
dataset = pd.read_csv(file_path)

# Step 1: Calculate Age
dataset['Age'] = 2024 - dataset['Year of Manufacture']
dataset.drop(columns=['Year of Manufacture'], inplace=True)

# Step 2: One-Hot Encoding for Categorical Features
dataset = pd.get_dummies(dataset, columns=['Fuel Type', 'Transmission Type', 'Body Type', 'OEM', 'City'], drop_first=True)

# Step 3: Convert 'Insurance Validity' to Binary Feature
dataset['Insurance_Validity'] = dataset['Insurance Validity'].apply(lambda x: 1 if x == 'Comprehensive' else 0)
dataset.drop(columns=['Insurance Validity'], inplace=True)

# Step 4: Extract Common Features from 'Top Features'
# Define common features to extract
common_features = ['Power Steering', 'Power Windows', 'Air Conditioning', 'Sunroof', 'Anti Lock Braking System']

# Initialize columns for each feature
for feature in common_features:
    dataset[feature] = 0  # Initialize with 0

# Parse 'Top Features' and set flags for common features
for i, row in dataset.iterrows():
    features_list = ast.literal_eval(row['Top Features'])
    available_features = [f['value'] for f in features_list if 'value' in f]
    for feature in common_features:
        if feature in available_features:
            dataset.at[i, feature] = 1  # Set flag to 1 if feature is present

# Drop original 'Top Features' column
dataset.drop(columns=['Top Features'], inplace=True)

# Step 5: Create Interaction Feature 'Age * Kilometers Driven'
dataset['Age_Kilometers_Interaction'] = dataset['Age'] * dataset['Kilometers Driven']

# Display the preprocessed dataset
dataset.head()
